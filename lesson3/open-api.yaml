openapi: 3.0.1
info:
  title: Shop
  version: 1.0.0
components:
  securitySchemes:
    api_key:
      type: "apiKey"
      name: "api_key"
      in: "header"
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        email:
          type: string
        password:
          type: string
    Item:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        price:
          type: integer # чтобы не потерять точность, денежные поля мы будем передавать
          format: int64 # в виде целочисленного значения минимальной размерности валюты (например, центы или копейки)
        image_link:
          type: string
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        number:
          type: string
        basket:
          type: array
          items:
            $ref: "#/components/schemas/Item"
        userId:
          type: integer
          format: int64
        price:
          type: integer
          format: int64
        deliveryId:
          type: integer
          format: int64
        paymentId:
          type: integer
          format: int64
        address:
          type: string
        comment:
          type: string
        status:
          type: string
          enum:
            - new
            - delivering
            - done
        date:
          type: string
          format: datetime
paths:
  /user/login:
    post:
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    post:
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        200:
          description: successful logout
          content: {}
  /items:
    post:
      summary: "Add a new item to the store"
      operationId: "CreateItem"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "405":
          description: "Invalid input"
      security:
        - api_key: []
    get:
      summary: Lists Items with filters
      operationId: ListItems
      parameters:
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Item"
        400:
          description: Invalid price range
          content: {}
  /items/upload_image:
    post:
      summary: "uploads an image"
      operationId: "uploadFile"
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                additionalMetadata:
                  type: string
                  description: "Additional data to pass to server"
                file:
                  type: string
                  format: binary
                  description: "file to upload"

              required:
                - additionalMetadata
                - file
      responses:
        "200":
          description: successful
          content:
            application/json:
              schema:
                type: object
      security:
        - api_key: []
  /items/{itemId}:
    get:
      summary: Find item by ID
      operationId: GetItem
      parameters:
        - name: itemId
          in: path
          description: ID of item to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        400:
          description: Invalid ID supplied
          content: {}
    put:
      summary: Updates a item in the store with form data
      operationId: UpdateItem
      parameters:
        - name: itemId
          in: path
          description: ID of item that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
                  description: Updated name of the item
                status:
                  type: string
                  description: Updated status of the item
      responses:
        405:
          description: Invalid input
          content: {}
      security:
        - api_key: []
    delete:
      summary: Deletes a item
      operationId: DeleteItem
      parameters:
        - name: itemId
          in: path
          description: Item id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: Item not found
          content: {}
      security:
        - api_key: []

  /orders:
    get:
      summary: List Orders with filters
      operationId: ListOrders
      parameters:
        - name: date_start
          in: query
          description: Date from
          required: false
          schema:
            type: string
            format: datetime
        - name: date_end
          in: query
          description: Date to
          required: false
          schema:
            type: string
            format: datetime
        - name: price_min
          in: query
          description: Lower price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: price_max
          in: query
          description: Upper price limit
          required: false
          schema:
            type: integer
            format: int64
        - name: status
          in: query
          description: Status of orders
          required: false
          schema:
            type: string
        - name: user_id
          in: query
          description: Users orders
          required: false
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"
        400:
          description: No orders in this timeframe
          content: {}
    post:
      summary: "Add a new order to the store"
      operationId: CreateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                basket:
                  type: array
                  items:
                    properties:
                      itemId:
                        type: integer
                        format: int64
                userId:
                  type: integer
                  format: int64
                price:
                  type: integer
                  format: int64
                deliveryId:
                  type: integer
                  format: int64
                paymentId:
                  type: integer
                  format: int64
                address:
                  type: string
                comment:
                  type: string
                status:
                  type: string
                  enum:
                    - new
      responses:
        "201":
          description: "Order created"
        "400":
          description: "Invalid data"

  /orders/{orderId}:
    get:
      summary: Find order by ID
      operationId: GetOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Order was found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order was not found
    patch:
      summary: Updates and order in the store with form data
      operationId: UpdateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be updated
          required: true
          schema:
            type: integer
            format: int64

      requestBody:
        content:
          application/json:
            schema:
              properties:
                basket:
                  type: array
                  items:
                    $ref: "#/components/schemas/Item"
                userId:
                  type: integer
                  format: int64
                price:
                  type: integer
                  format: int64
                deliveryId:
                  type: integer
                  format: int64
                paymentId:
                  type: integer
                  format: int64
                address:
                  type: string
                comment:
                  type: string
                status:
                  type: string
                  enum:
                    - new
                    - delivering
                    - done
      responses:
        "200":
          description: Order has been updated
        "400":
          description: Invalid data
    delete:
      summary: Deletes an order
      operationId: DeleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of an order to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Order has been DeleteOrder
        "404":
          description: Order doesnt exist
        "400":
          description: Order couldnt be deleted
